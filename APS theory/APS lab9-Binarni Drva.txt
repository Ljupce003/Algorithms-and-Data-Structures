//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//zad 1

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Stack;


class BNode<E> {

    public E info;
    public BNode<E> left;
    public BNode<E> right;

    static int LEFT = 1;
    static int RIGHT = 2;

    public BNode(E info) {
        this.info = info;
        left = null;
        right = null;
    }

    public BNode(E info, BNode<E> left, BNode<E> right) {
        this.info = info;
        this.left = left;
        this.right = right;
    }

}

class BTree<E> {

    public BNode<E> root;

    public BTree() {
        root = null;
    }

    public BTree(E info) {
        root = new BNode<E>(info);
    }

    public void makeRoot(E elem) {
        root = new BNode<E>(elem);
    }

    public BNode<E> addChild(BNode<E> node, int where, E elem) {

        BNode<E> tmp = new BNode<E>(elem);

        if (where == BNode.LEFT) {
            if (node.left != null)  // veke postoi element
                return null;
            node.left = tmp;
        } else {
            if (node.right != null) // veke postoi element
                return null;
            node.right = tmp;
        }

        return tmp;
    }

    public void inorder() {
        System.out.print("INORDER: ");
        inorderR(root);
        System.out.println();
    }

    public void inorderR(BNode<E> n) {
        if (n != null) {
            inorderR(n.left);
            System.out.print(n.info.toString()+" ");
            inorderR(n.right);
        }
    }

    public void preorder() {
        System.out.print("PREORDER: ");
        preorderR(root);
        System.out.println();
    }

    public void preorderV2(List<E> list) {
        //System.out.print("PREORDER: ");
        preorderRV2(root,list);
        //System.out.println();
    }

    public void preorderR(BNode<E> n) {
        if (n != null) {
            System.out.print(n.info.toString()+" ");
            preorderR(n.left);
            preorderR(n.right);
        }
    }

    public void preorderRV2(BNode<E> n,List<E> list) {
        if (n != null) {
            list.add(n.info);
            preorderRV2(n.left,list);
            preorderRV2(n.right,list);
        }
    }

    public void postorder() {
        System.out.print("POSTORDER: ");
        postorderR(root);
        System.out.println();
    }

    public void postorderR(BNode<E> n) {
        if (n != null) {
            postorderR(n.left);
            postorderR(n.right);
            System.out.print(n.info.toString()+" ");
        }
    }

    public void inorderNonRecursive() {
        Stack<BNode<E>> s = new Stack<BNode<E>>();
        BNode<E> p = root;
        System.out.print("INORDER (nonrecursive): ");

        while (true) {
            // pridvizuvanje do kraj vo leva nasoka pri sto site koreni
            // na potstebla se dodavaat vo magacin za podocnezna obrabotka
            while (p != null) {
                s.push(p);
                p = p.left;
            }

            // ako magacinot e prazen znaci deka stebloto e celosno izminato
            if (s.isEmpty())
                break;

            p = s.peek();
            // pecatenje (obrabotka) na jazelot na vrvot od magacinot
            System.out.print(p.info.toString()+" ");
            // brisenje na obraboteniot jazel od magacinot
            s.pop();
            // pridvizuvanje vo desno od obraboteniot jazel i povtoruvanje na
            // postapkata za desnoto potsteblo na jazelot
            p = p.right;

        }
        System.out.println();

    }

}

public class ConsecutiveNumbers {

    public static void main(String[] args) throws Exception {
        int i,j,k;

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());

        @SuppressWarnings("unchecked")
        BNode<Integer> nodes[] = new BNode[N];
        BTree<Integer> tree = new BTree<Integer>();

        for (i=0;i<N;i++)
            nodes[i] = null;

        for (i = 0; i < N; i++) {
            String line = br.readLine();
            st = new StringTokenizer(line);
            int index = Integer.parseInt(st.nextToken());
            nodes[index] = new BNode<Integer>(Integer.parseInt(st.nextToken()));
            String action = st.nextToken();
            if (action.equals("LEFT")) {
                BNode<Integer> child = tree.addChild(nodes[Integer.parseInt(st.nextToken())], BNode.LEFT, nodes[index].info);
                nodes[index] = child;
            } else if (action.equals("RIGHT")) {
                BNode<Integer> child = tree.addChild(nodes[Integer.parseInt(st.nextToken())], BNode.RIGHT, nodes[index].info);
                nodes[index] = child;
            } else {
                // this node is the root
                tree.makeRoot(nodes[index].info);
                nodes[index] = tree.root;
            }
        }

        br.close();



        // vasiot kod ovde
        List<Integer> lista=new ArrayList<>(N);
        tree.preorderV2(lista);
        boolean flag=true;
        if(!lista.isEmpty()){
            for ( i = 1; i < lista.size(); i++) {
                int f=lista.get(i-1);
                int s=lista.get(i);
                if(s-f!=2){flag=false;break;}
            }
        }

        System.out.println(flag);

    }

}





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//zad 2


import com.sun.source.tree.BinaryTree;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;

public class Tournament{


    public static void main(String[] args) throws IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int N=Integer.parseInt(br.readLine());
        Stack<Integer> stack=new Stack<>();

        int count=1;
        for (int i = 0; i < N; i++) {
            stack.push(Integer.parseInt(br.readLine()));
        }

        int score=Integer.parseInt(br.readLine());

        for (int i = 0; i < N; i++) {
            if(!stack.empty()){
                if(stack.pop()>score)count++;
            }
        }

        System.out.println(count);

    }
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//zad 3


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Formatter;

public class Bus{

    public static void main(String[] args) throws IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int capacity=Integer.parseInt(br.readLine());
        int N=Integer.parseInt(br.readLine());
        int count=0;
        //LocalTime[] localDateTimes=new LocalTime[(N+1)*2];
        //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        Integer []nums=new Integer[N*2];
        int max=0;
        for (int i = 0; i < N; i++) {
            String [] parts=br.readLine().split("\\s+");
            //localDateTimes[2*i]=LocalTime.parse(parts[0]/*,formatter*/);
            //localDateTimes[2*i+1]=LocalTime.parse(parts[1]/*,formatter*/);

            nums[2*i]=converttime(parts[0]);
            nums[2*i+1]=converttime(parts[1]);
        }
        //System.out.println(Arrays.toString(localDateTimes));
        for(int i=0;i<2399;i++){
            int now=0;
            for(int j=0;j<N;j++){
                if(nums[2*j]<=i && i<=nums[2*j+1])now++;
            }
            if(now>max)max=now;
        }
        boolean flag= max <= capacity;
        System.out.println(flag);
    }

    private static Integer converttime(String part) {
        String []parts=part.split(":");
        return Integer.parseInt(parts[0])*100+Integer.parseInt(parts[1]);
    }
}
